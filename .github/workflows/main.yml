name: Main
on:
  push:
    branches:
      - master
    tags:
      - "[0-9]+.[0-9]+.[0-9]+"
  pull_request:
jobs:
  lint:
    name: Lint with Flake8
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.6"]
    env:
      EXAMPLE_ENGINE: sqlite3
    permissions:
      contents: read
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Set up Python
        uses: actions/setup-python@v3
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install dependencies
        run: pip install flake8~=3.0
      - name: Run Flake8
        run: flake8
  test-units:
    name: Test units
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.6", "3.7", "3.8", "3.9"]
        django-version: ["2.2", "3.0", "3.1"]
    env:
      EXAMPLE_ENGINE: sqlite3
    permissions:
      contents: read
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Set up Python
        uses: actions/setup-python@v3
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install dependencies
        run: |
          pip install django~=${{ matrix.django-version }}
          pip install djangorestframework~=3.0
      - name: Create example project
        run: python create.py
      - name: Run and test units
        run: python project/manage.py test -v 3
  test-docs:
    name: Test documentations
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.6", "3.7", "3.8", "3.9"]
        django-version: ["2.2", "3.0", "3.1"]
    env:
      EXAMPLE_ENGINE: sqlite3
    permissions:
      contents: read
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Set up Python
        uses: actions/setup-python@v3
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install dependencies
        run: |
          pip install django~=${{ matrix.django-version }}
          pip install djangorestframework~=3.0
          pip install sphinx~=1.0
      - name: Create example project
        run: python create.py
      - name: Create configurations file
        run: python config.py
      - name: Run and test documentations
        run: make --directory docs doctest
  build-docs:
    name: Build documentations for GitHub Pages
    runs-on: ubuntu-latest
    env:
      EXAMPLE_ENGINE: sqlite3
    permissions:
      contents: read
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Set up Python
        uses: actions/setup-python@v3
        with:
          python-version: "3.6"
      - name: Install dependencies
        run: |
          pip install django~=2.2
          pip install djangorestframework~=3.0
          pip install sphinx~=1.0
      - name: Create example project
        run: python create.py
      - name: Create configurations file
        run: python config.py
      - name: Build documentations
        run: make --directory docs html
      - name: Upload built documentations as pages artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: docs/_build/html
  deploy-pypi:
    name: Build and deploy package to PyPI
    runs-on: ubuntu-latest
    needs: [lint, test-units, test-docs, build-docs]
    if: startsWith(github.ref, 'refs/tags/')
    env:
      EXAMPLE_ENGINE: sqlite3
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Set up Python
        uses: actions/setup-python@v3
        with:
          python-version: "3.x"
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build
      - name: Create configurations file
        run: python config.py
      - name: Build package
        run: python -m build
      - name: Publish package
        uses: pypa/gh-action-pypi-publish@27b31702a0e7fc50959f5ad993c78deac1bdfc29
        with:
          user: __token__
          password: ${{ secrets.PYPI_API_TOKEN }}
  deploy-docs:
    name: Deploy documentations to GitHub Pages
    runs-on: ubuntu-latest
    needs: [deploy-pypi]
    if: startsWith(github.ref, 'refs/tags/')
    env:
      EXAMPLE_ENGINE: sqlite3
    permissions:
      pages: write
      id-token: write
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
